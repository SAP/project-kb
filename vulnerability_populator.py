# This script populates Vulas tool with the vulnerabilities specified in the 'dataset.csv' file
# Default script usage is: python3 vulnerability_populator.py -pa PATH_TO_PATCH_ANALYZER [-u BACKEND_URL -ds DATASET_FILE]
#  - PATH_TO_PATCH_ANALYZER is the compulsory parameter, that specifies the path to the
# patch-analyzer-{VERSION}-jar-with-dependencies.jar file, which is located in
# {VULAS_BUILD_FOLDER}/patch-analyzer/target/patch-analyzer-{VERSION}-jar-with-dependencies.jar
#  - BACKEND_URL is an optional parameter, that allows users to specify the Vulas Backend url. By default,
#  BACKEND_URL is equal to 'http://localhost:8033/backend/'
# - DATASET_FILE is an optional parameter, that specifies the path to the 'dataset.csv' file with vulnerability list to
#  populate Vulas with. By default, the script assumes the presence of the file in the same folder.

import csv
import os
import subprocess, signal
import argparse

cwd = os.path.dirname(__file__)
#-----------------------------------------------------------------------------------------------------------------------
#default values of parameters
INPUT_FILE = os.path.join(cwd, 'dataset.csv')
BACKEND_URL='http://localhost:8033/backend/'
#-----------------------------------------------------------------------------------------------------------------------

TIMEOUT = 15 * 60 # timeout for processing one library, currently I am setting it to be 15 minutes

parser = argparse.ArgumentParser(description='Script for populating Vulas vulnerability database')
parser.add_argument('-pa', '--patch_analyzer', help='Path to Patch-Analyzer.jar', required=True)
parser.add_argument('-u', '--url', help='Vulas backend service url')
parser.add_argument('-ds', '--dataset', help='Path to the file with the vulnerability dataset')
args = parser.parse_args()

patch_analyzer_location = args.patch_analyzer
if args.dataset:
    INPUT_FILE = args.dataset
if args.url:
    BACKEND_URL = args.url

count = 0
try:
    with open(INPUT_FILE, 'r', newline='') as f_in:
        reader = csv.reader(f_in,delimiter=',')
        for line in reader:
            # Example of a proper command to add vulnerability to the Vulas database
            # java -Dvulas.shared.backend.serviceUrl=http://localhost:8033/backend/ -jar ./patch-analyzer/target/patch-analyzer-3.0.14-jar-with-dependencies.jar com.sap.psr.vulas.PatchAnalyzer -r https://github.com/bcgit/bc-java/ -b CVE-2018-5382 -e 81b00861cd5711e85fe8dce2a0e119f684120255 -u
            try:
                cveid = line[0]
                repo = line[1]
                commit = line[2]
            except Exception as e:
                print('An Exception occured, while processing line {} from file {}'.format(line, INPUT_FILE))
                print('The line is expected to have the following format: CVE_id,repo_path,commit_id')
                print(str(e))
                continue
            command = 'java -Dvulas.shared.backend.serviceUrl={} -jar {} com.sap.psr.vulas.PatchAnalyzer -r {} -b {} -e {} -u'.format(BACKEND_URL, patch_analyzer_location, repo, cveid, commit).split()
            print('Processing line {} ({})'.format(count, line))
            count += 1
            with subprocess.Popen(command, stdout=subprocess.PIPE, preexec_fn=os.setsid) as process:
                try:
                    process.wait(timeout=TIMEOUT)
                except subprocess.TimeoutExpired:
                    os.killpg(process.pid, signal.SIGINT)  # send signal to the process group
                except Exception as e:
                    print('An exception occured, while running ' + str(command))
                    print(str(e))
except OSError as e:
    print('An exception occured, while trying to read data from file {}'.format(INPUT_FILE))
    print('Can you check if the path to the file with the vulnerability database is correct?')
    print(str(e))